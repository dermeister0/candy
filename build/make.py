#!/usr/bin/env python

import os
import platform
import re
import shutil
import sys
import subprocess


class Target(object):
    def __init__(self, solution, framework):
        self.solution = solution
        self.framework = framework

USEMONO = platform.system().lower() != 'windows'
NUGET = '../src/.nuget/NuGet.exe' if not USEMONO else 'nuget'
NUNIT = 'nunit-console'
BUILD = 'msbuild' if not USEMONO else 'xbuild'
SIGNKEY = 'candy.snk'  # can be generated by sn -k candy.snk command

targets = [
    Target('../src/Candy.netfx35.sln', 'net35'),
    Target('../src/Candy.netfx40.sln', 'net40'),
    Target('../src/Candy.netfx45.sln', 'net45'),
    Target('../src/Candy.wp8.sln', 'portable-net45+wp80+win8+wpa81+dnxcore50'),
]

def pack():
    for target in targets:
        # build & sign
        signfile = os.path.join(os.getcwd(), SIGNKEY)
        buildargs = [BUILD, target.solution, '/p:Configuration=Release', '/p:Platform=Any CPU']
        if not os.path.exists(signfile):
            print('[!] Sign file does not exist')
            exit(1)
        buildargs.append('/p:AssemblyOriginatorKeyFile=' + signfile)
        buildargs.append('/p:SignAssembly=true')
        retcode = subprocess.call(buildargs)
        if retcode:
            print('[!] Cannot build %s' % target.solution)
            exit(1)
        # test
        buildargs = [NUNIT, '../src/Candy.Tests/bin/Release/Candy.Tests.dll', '/noresult']
        if USEMONO:
            buildargs = [(buildarg[0].replace('/', '-') + buildarg[1:]) for buildarg in buildargs]
        retcode = subprocess.call(buildargs)
        if retcode:
            print('[!] Cannot run tests for %s' % target.solution)
            exit(1)
        # copy
        path = os.path.join('lib', target.framework)
        if not os.path.exists(path):
            os.makedirs(path)
        shutil.copy('../src/Candy/bin/Release/Candy.dll', path)
        shutil.copy('../src/Candy/bin/Release/Candy.xml', path)
    # get version from AssemblyInfo.cs
    with open('../src/Candy/Properties/AssemblyInfo.cs', 'r') as f:
        version = re.findall(r'AssemblyVersion\(\"(\d+.\d+.\d+).\d+\"\)', f.read())[0]
    # pack
    retcode = subprocess.call([NUGET, 'pack', 'Candy.nuspec', '-Version', version,
        '-NonInteractive', '-Exclude', '*.snk;*.py'])
    if retcode:
        print('[!] Cannot make package')
        exit(1)

def clean():
    shutil.rmtree('./lib')


if __name__ == '__main__':
    arg = sys.argv[1] if len(sys.argv) > 1 else None
    if not arg or arg not in globals():
        print('Available commands: pack')
        exit(0)

    globals()[arg]()
